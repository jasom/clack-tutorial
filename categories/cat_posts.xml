<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Clack Tutorial (Posts about posts)</title><link>https://jasom.github.io/clack-tutorial/</link><description></description><atom:link href="https://jasom.github.io/clack-tutorial/categories/cat_posts.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2020 &lt;a href="mailto:jasom@fastmail.com"&gt;Jason Miller&lt;/a&gt; </copyright><lastBuildDate>Tue, 05 May 2020 23:30:13 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Getting started with clack</title><link>https://jasom.github.io/clack-tutorial/posts/getting-started-with-clack/</link><dc:creator>Jason Miller</dc:creator><description>&lt;p&gt;
Clack is a very simple framework for unifying the different lisp web
application servers.  However there isn't a lot of documentation for
it.  This page hopes to address this.
&lt;/p&gt;

&lt;div id="outline-container-orgf651e6f" class="outline-2"&gt;
&lt;h2 id="orgf651e6f"&gt;Annotated examples of usage&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf651e6f"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgcf8f401" class="outline-3"&gt;
&lt;h3 id="orgcf8f401"&gt;Formatting&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgcf8f401"&gt;
&lt;p&gt;
All input and output are presented in monospaced preformatted blocks.
The color indicates what sort they are:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s"&gt;"Lisp code has a gray background; it can be typed at the REPL"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
NIL

&lt;/pre&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;: shell code has a green background, it can be typed at a shell prompt
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt; &lt;span class="s"&gt;"Output from running commands has a yellow background; do not type this"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
Output from running commands has a yellow background; do not type this

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org923e4bf" class="outline-3"&gt;
&lt;h3 id="org923e4bf"&gt;Load dependencies used in examples:&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org923e4bf"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ql:quickload&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;clack&lt;/span&gt; &lt;span class="nv"&gt;alexandria&lt;/span&gt; &lt;span class="nv"&gt;optima&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;use-package&lt;/span&gt; &lt;span class="ss"&gt;:optima&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
To load "clack":
  Load 1 ASDF system:
    clack
; Loading "clack"
...
To load "alexandria":
  Load 1 ASDF system:
    alexandria
; Loading "alexandria"

To load "optima":
  Load 1 ASDF system:
    optima
; Loading "optima"

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org231cde6" class="outline-3"&gt;
&lt;h3 id="org231cde6"&gt;Start a simple server&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org231cde6"&gt;
&lt;p&gt;
The only required argument for &lt;code&gt;clackup&lt;/code&gt; is the application; the
simplest form of the application is a function of one argument.
&lt;/p&gt;

&lt;p&gt;
The function should retun a list of the form (&lt;i&gt;http-response-code&lt;/i&gt; &lt;i&gt;http-headers-alist&lt;/i&gt; &lt;i&gt;&amp;amp;optional&lt;/i&gt; &lt;i&gt;body&lt;/i&gt;)
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;body&lt;/i&gt; can be a vector of &lt;code&gt;(unsigned-byte 8)&lt;/code&gt;, a pathname, or a list of strings.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defparameter&lt;/span&gt; &lt;span class="vg"&gt;*clack-server*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;clack:clackup&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                         &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
Hunchentoot server is started.
Listening on localhost:5000.

&lt;/pre&gt;


&lt;p&gt;
Let's test it with curl:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   curl -s http://localhost:5000
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
Hello, World!

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge897ef2" class="outline-3"&gt;
&lt;h3 id="orge897ef2"&gt;Stop the server&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge897ef2"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;clack:stop&lt;/span&gt; &lt;span class="vg"&gt;*clack-server*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org982b35e" class="outline-3"&gt;
&lt;h3 id="org982b35e"&gt;Redefining the handler&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org982b35e"&gt;
&lt;p&gt;
It's a bit of a pain to have to restart the server all the time, let's make a redefinable handler:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;handler&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World, redefinable!"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
And start the server; we call the function by name to allow redefinition
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defparameter&lt;/span&gt; &lt;span class="vg"&gt;*clack-server*&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;clack:clackup&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;funcall&lt;/span&gt; &lt;span class="ss"&gt;'handler&lt;/span&gt; &lt;span class="nv"&gt;env&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
Hunchentoot server is started.
Listening on localhost:5000.

&lt;/pre&gt;

&lt;p&gt;
Check that it works…
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   curl -s http://localhost:5000
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
Hello World, redefinable!

&lt;/pre&gt;

&lt;p&gt;
Now let's redefine it and take a look at what is in the environment:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;handler&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;prin1-to-string&lt;/span&gt; &lt;span class="nv"&gt;env&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
View results…
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   curl -s http://localhost:5000
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
(:REQUEST-METHOD :GET :SCRIPT-NAME "" :PATH-INFO "/" :SERVER-NAME "localhost"
 :SERVER-PORT 5000 :SERVER-PROTOCOL :HTTP/1.1 :REQUEST-URI "/" :URL-SCHEME
 "http" :REMOTE-ADDR "127.0.0.1" :REMOTE-PORT 53824 :QUERY-STRING NIL :RAW-BODY
 #&amp;lt;FLEXI-STREAMS:FLEXI-IO-STREAM {1021B536E3}&amp;gt; :CONTENT-LENGTH NIL
 :CONTENT-TYPE NIL :CLACK.STREAMING T :CLACK.IO
 #&amp;lt;CLACK.HANDLER.HUNCHENTOOT::CLIENT {1021B537F3}&amp;gt; :HEADERS
 #&amp;lt;HASH-TABLE :TEST EQUAL :COUNT 3 {1021B53C13}&amp;gt;)

&lt;/pre&gt;

&lt;p&gt;
This is the core part of clack; the environment plist.
&lt;/p&gt;

&lt;p&gt;
Documentation for it is available &lt;a href="http://quickdocs.org/lack/#the-environment"&gt;on quickdocs.&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
The fact that it is a plist means capturing values of interest can be done with &lt;code&gt;destructuring-bind&lt;/code&gt;:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;handler&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;destructuring-bind&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&amp;amp;key&lt;/span&gt; &lt;span class="nv"&gt;request-method&lt;/span&gt; &lt;span class="nv"&gt;path-info&lt;/span&gt; &lt;span class="nv"&gt;request-uri&lt;/span&gt;
                              &lt;span class="nv"&gt;query-string&lt;/span&gt; &lt;span class="nv"&gt;headers&lt;/span&gt; &lt;span class="k"&gt;&amp;amp;allow-other-keys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nv"&gt;env&lt;/span&gt;
      &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;
        &lt;span class="no"&gt;nil&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="s"&gt;"Method: ~S Path: ~S URI: ~A Query: ~S~%Headers: ~S"&lt;/span&gt;
                  &lt;span class="nv"&gt;request-method&lt;/span&gt; &lt;span class="nv"&gt;path-info&lt;/span&gt; &lt;span class="nv"&gt;request-uri&lt;/span&gt; &lt;span class="nv"&gt;query-string&lt;/span&gt;
                  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;alexandria:hash-table-alist&lt;/span&gt; &lt;span class="nv"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;))))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -s http://localhost:5000
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
Method: :GET Path: "/" URI: / Query: NIL
Headers: (("accept" . "*/*") ("user-agent" . "curl/7.53.0")
          ("host" . "localhost:5000"))

&lt;/pre&gt;

&lt;p&gt;
Optima can be useful too:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;handler&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;optima:match&lt;/span&gt; &lt;span class="nv"&gt;env&lt;/span&gt;
      &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;guard&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;property&lt;/span&gt; &lt;span class="ss"&gt;:path-info&lt;/span&gt; &lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;alexandria:starts-with-subseq&lt;/span&gt; &lt;span class="s"&gt;"/foo/"&lt;/span&gt; &lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
       &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="s"&gt;"The path '~A' is in /foo/~%"&lt;/span&gt; &lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
      &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;guard&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;property&lt;/span&gt; &lt;span class="ss"&gt;:path-info&lt;/span&gt; &lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;alexandria:starts-with-subseq&lt;/span&gt; &lt;span class="s"&gt;"/bar/"&lt;/span&gt; &lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
       &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="s"&gt;"The path '~A' is in /bar/~%"&lt;/span&gt; &lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
      &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;property&lt;/span&gt; &lt;span class="ss"&gt;:path-info&lt;/span&gt; &lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="s"&gt;"Path ~A not found~%"&lt;/span&gt; &lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="p"&gt;))))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   curl -s http://localhost:5000/foo/quux
   curl -s http://localhost:5000/bar/quux
   curl -s http://localhost:5000/baz/quux
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
The path '/foo/quux' is in /foo/
The path '/bar/quux' is in /bar/
Path /baz/quux not found

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org582fe4e" class="outline-2"&gt;
&lt;h2 id="org582fe4e"&gt;Public API&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org582fe4e"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org95221c7" class="outline-3"&gt;
&lt;h3 id="org95221c7"&gt;CLACK:CLACKUP&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org95221c7"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org11add97" class="outline-4"&gt;
&lt;h4 id="org11add97"&gt;Syntax:&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org11add97"&gt;
&lt;p&gt;
&lt;b&gt;clackup&lt;/b&gt; &lt;i&gt;app&lt;/i&gt; &lt;i&gt;&amp;amp;key&lt;/i&gt; &lt;i&gt;server&lt;/i&gt; &lt;i&gt;port&lt;/i&gt; &lt;i&gt;debug&lt;/i&gt; &lt;i&gt;silent&lt;/i&gt;
&lt;i&gt;use-thread&lt;/i&gt; &lt;i&gt;use-default-middlewares&lt;/i&gt; &lt;i&gt;&amp;amp;allow-other-keys&lt;/i&gt;
&lt;/p&gt;


&lt;p&gt;
=&amp;gt; &lt;i&gt;handler&lt;/i&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7453ec3" class="outline-4"&gt;
&lt;h4 id="org7453ec3"&gt;Arguments and Values:&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org7453ec3"&gt;
&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="orga02a7d8"&gt;&lt;/a&gt;&lt;i&gt;app&lt;/i&gt;–A &lt;i&gt;designator&lt;/i&gt; for a &lt;i&gt;function&lt;/i&gt; of one argument;or a subclass of &lt;code&gt;lack.component:lack-component&lt;/code&gt;;or a &lt;i&gt;pathname&lt;/i&gt;; or a &lt;i&gt;string&lt;/i&gt;.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;a id="org023a1da"&gt;&lt;/a&gt;&lt;i&gt;server&lt;/i&gt;–A symbol.  The default is &lt;code&gt;:hunchentoot&lt;/code&gt;&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;a id="org7bd3f52"&gt;&lt;/a&gt;&lt;i&gt;port&lt;/i&gt;–An integer.  The default is 5000&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;a id="org614e44e"&gt;&lt;/a&gt;&lt;i&gt;debug&lt;/i&gt;–A boolean.  The default is &lt;code&gt;t&lt;/code&gt;&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;a id="orgf46a709"&gt;&lt;/a&gt;&lt;i&gt;silent&lt;/i&gt;–A boolean.  The default is &lt;code&gt;nil&lt;/code&gt;&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;a id="org3d16b8f"&gt;&lt;/a&gt;&lt;i&gt;use-thread&lt;/i&gt;–A boolean.  The default is &lt;code&gt;t&lt;/code&gt; on systems that support threading and &lt;code&gt;nil&lt;/code&gt; otherwise.&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;a id="org84e825a"&gt;&lt;/a&gt;&lt;i&gt;use-default-middlewares&lt;/i&gt;–A boolean.  The default is &lt;code&gt;t&lt;/code&gt;&lt;br&gt;&lt;/li&gt;

&lt;li&gt;&lt;a id="org872ef6e"&gt;&lt;/a&gt;&lt;i&gt;handler&lt;/i&gt;–A clack.handler::handler.&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4c7c80c" class="outline-4"&gt;
&lt;h4 id="org4c7c80c"&gt;Description:&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org4c7c80c"&gt;
&lt;p&gt;
&lt;code&gt;clackup&lt;/code&gt; starts a server using the backend designated by &lt;i&gt;server&lt;/i&gt; on
port &lt;i&gt;port&lt;/i&gt;.
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;app&lt;/i&gt; is used to build the handler chain for the server as follows:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;If &lt;i&gt;app&lt;/i&gt; is a function then it will be used directly, and called on each request with the requst environment as its only parameter&lt;/li&gt;
&lt;li&gt;If &lt;i&gt;app&lt;/i&gt; is a subclass of &lt;code&gt;lack.component:lack-component&lt;/code&gt; then (lack.component:call &lt;i&gt;app&lt;/i&gt; &lt;i&gt;environment&lt;/i&gt;) will be called on every request&lt;/li&gt;
&lt;li&gt;If &lt;i&gt;app&lt;/i&gt; is a pathname then it will be treated as a lisp file to be evaluated.  The result of the last form of the file will be used as above&lt;/li&gt;
&lt;li&gt;If &lt;i&gt;app&lt;/i&gt; is a string, then it will be coerced to a pathname and used as above.&lt;/li&gt;
&lt;li&gt;If &lt;i&gt;use-default-middlewares&lt;/i&gt; is &lt;i&gt;true&lt;/i&gt; then &lt;i&gt;app&lt;/i&gt; will be wrapped by the default middlewares&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;i&gt;server&lt;/i&gt; designates the backend to use; if the backend is not found,
then &lt;code&gt;clackup&lt;/code&gt; will attempt to load it via &lt;code&gt;quicklisp&lt;/code&gt; or &lt;code&gt;asdf&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;port&lt;/i&gt; specifies which port to listen on.
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;debug&lt;/i&gt; specifies that debug mode is on.  The results of this is
backend specific, but typically will handle all errors in the body of
&lt;i&gt;app&lt;/i&gt; by returning a 500 response to the user if &lt;i&gt;false&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;silent&lt;/i&gt; Suppresses printing of status messages.
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;use-thread&lt;/i&gt; If &lt;i&gt;true&lt;/i&gt;, the backend is launched in a separate thread.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://jasom.github.io/clack-tutorial/posts/getting-started-with-clack/</guid><pubDate>Mon, 27 Mar 2017 06:36:28 GMT</pubDate></item></channel></rss>